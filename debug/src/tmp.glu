let array @ { ? } = import! std.array

let io @ { ? } = import! std.io
let array @ { ? } = import! std.array
let list @ { ? } = import! std.list
let { Result }= import! std.result
let { (<|) } = import! std.function
let effect @ { Eff, ? } = import! std.effect
let { Lift, run_lift, lift, ? } = import! std.effect.lift
let { Eff, run_pure, ? } = import! std.effect
let st @ { ? } = import! std.effect.st
let { (*>), wrap } = import! std.applicative
let { State, eval_state, modify, get, ? } = import! std.effect.state

let intf @ { ? } = import! intf
//let point3d @ { Point3d, ? } = import! muscad.point3d
let model @ { Model, ? } = import! muscad.model
let boolean @ { ? } = import! muscad.boolean

let pts_a = [
  [1.0, 1.0, 1.0],
  [-1.0, 1.0, 1.0],
  [-1.0, -1.0, 1.0],
  [1.0, -1.0, 1.0],
  [1.0, 1.0, -1.0],
  [-1.0, 1.0, -1.0],
  [-1.0, -1.0, -1.0],
  [1.0, -1.0, -1.0],
]

let pts_b = [
  [1.52, -0.54, 0.69 ],
  [1.52, 0.46, 0.69  ],
  [0.52, 0.46, 0.69  ],
  [0.52, -0.54, 0.69 ],
  [1.52, -0.54, -0.31],
  [1.52, 0.46, -0.31 ],
  [0.52, -0.54, -0.31],
  [0.52, 0.46, -0.31 ],
]

let get_face_pts pts indices : forall a . Array a -> Array Int -> Array a
  = array.functor.map (array.index pts) indices

//type ModelEffect r a = [| st : st.State s | r |] (Model s)

let gen_a =
  do model_a = model.new
  do _ = model.add_face model_a <| get_face_pts pts_a [0, 1, 2, 3]
  do _ = model.add_face model_a <| get_face_pts pts_a [7, 6, 5, 4]
  do _ = model.add_face model_a <| get_face_pts pts_a [0, 4, 5, 1]
  do _ = model.add_face model_a <| get_face_pts pts_a [1, 5, 6, 2]
  do _ = model.add_face model_a <| get_face_pts pts_a [2, 6, 7, 3]
  do _ = model.add_face model_a <| get_face_pts pts_a [3, 7, 4, 0]
  wrap model_a

let draw m : Model s -> Eff [| st : st.State s | r |] (io.IO ()) =
  st.send_state (st.make_call (\_ -> intf.draw_model m))
  

let gen_b : forall s . Eff [| st : st.State s | r |] (Model s) =
  do model_b = model.new
  do _ = model.add_face model_b <| get_face_pts pts_b [0, 1, 2, 3]
  do _ = model.add_face model_b <| get_face_pts pts_b [4, 5, 1, 0]
  do _ = model.add_face model_b <| get_face_pts pts_b [6, 4, 0, 3]
  do _ = model.add_face model_b <| get_face_pts pts_b [7, 6, 3, 2]
  do _ = model.add_face model_b <| get_face_pts pts_b [5, 7, 2, 1]
  do _ = model.add_face model_b <| get_face_pts pts_b [5, 4, 6, 7]
  wrap model_b

let action =
  do a = gen_a
  do b = gen_b
  let c = boolean.a_minus_b a b
  draw c

run_pure (st.run_state action)
